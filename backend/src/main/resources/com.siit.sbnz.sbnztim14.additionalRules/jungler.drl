package com.siit.sbnz.sbnztim14.additionalRules

import com.siit.sbnz.sbnztim14.model.AllyChampion;
import com.siit.sbnz.sbnztim14.model.EnemyChampion;
import com.siit.sbnz.sbnztim14.model.GameEvent;
import com.siit.sbnz.sbnztim14.model.EventType;
import com.siit.sbnz.sbnztim14.model.JunglerConclusion;
import java.util.ArrayList;

global ArrayList<EventType> goodEvents;
global ArrayList<EventType> badEvents;

declare window LastEightEventsWindow
    @doc("Last 8 events in game")
    GameEvent() over window:length( 8 )
end

declare window AllEventsWindow
    @doc("All events in the game")
    GameEvent() over window:time( 60m )
end

rule "Jungler should gank top lane"
    salience -1 * (($goodWholeGame - $goodLast8) - ($badWholeGame - $badLast8))
        -3 * ($goodLast8 - $badLast8) + 100
    no-loop
    when
        Number($goodLast8: intValue >= 0) from accumulate(
            GameEvent($ev: this, eventType memberOf goodEvents, lane == "top")
            from window LastEightEventsWindow,
            count($ev)
        )

        Number($badLast8: intValue >= 0) from accumulate(
            GameEvent($ev: this, eventType memberOf badEvents, lane == "top")
            from window LastEightEventsWindow,
            count($ev)
        )

        Number($goodWholeGame: intValue >= 0) from accumulate(
            GameEvent($allEv: this, eventType memberOf goodEvents, lane == "top")
            from window AllEventsWindow,
            count($allEv)
        )

        Number($badWholeGame: intValue >= 0) from accumulate(
            GameEvent($allEv: this, eventType memberOf badEvents, lane == "top")
            from window AllEventsWindow,
            count($allEv)
        )

        not(JunglerConclusion(nextGank != ""))
        $jc: JunglerConclusion()
    then
        System.out.println("TOP");
        System.out.println($goodLast8);
        System.out.println($badLast8);
        System.out.println($goodWholeGame);
        System.out.println($badWholeGame);
        System.out.println(-1 * (($goodWholeGame - $goodLast8) - ($badWholeGame - $badLast8))
                                   -3 * ($goodLast8 - $badLast8) + 100);
        System.out.println();

        modify($jc){setNextGank("top")}
end


rule "Jungler should gank mid lane"
    salience -1 * (($goodWholeGame - $goodLast8) - ($badWholeGame - $badLast8))
        -3 * ($goodLast8 - $badLast8) + 100
    no-loop
    when
        Number($goodLast8: intValue >= 0) from accumulate(
            GameEvent($ev: this, eventType memberOf goodEvents, lane == "mid")
            from window LastEightEventsWindow,
            count($ev)
        )

        Number($badLast8: intValue >= 0) from accumulate(
            GameEvent($ev: this, eventType memberOf badEvents, lane == "mid")
            from window LastEightEventsWindow,
            count($ev)
        )

        Number($goodWholeGame: intValue >= 0) from accumulate(
            GameEvent($allEv: this, eventType memberOf goodEvents, lane == "mid")
            from window AllEventsWindow,
            count($allEv)
        )

        Number($badWholeGame: intValue >= 0) from accumulate(
            GameEvent($allEv: this, eventType memberOf badEvents, lane == "mid")
            from window AllEventsWindow,
            count($allEv)
        )

        not(JunglerConclusion(nextGank != ""))
        $jc: JunglerConclusion()
    then
        System.out.println("MID");
        System.out.println($goodLast8);
        System.out.println($badLast8);
        System.out.println($goodWholeGame);
        System.out.println($badWholeGame);
        System.out.println(-1 * (($goodWholeGame - $goodLast8) - ($badWholeGame - $badLast8))
                                   -3 * ($goodLast8 - $badLast8) + 100);
        System.out.println();
        modify($jc){setNextGank("mid")}
end


rule "Jungler should gank bottom lane"
    salience -1 * (($goodWholeGame - $goodLast8) - ($badWholeGame - $badLast8))
        -3 * ($goodLast8 - $badLast8) + 100
    no-loop
    when
        Number($goodLast8: intValue >= 0) from accumulate(
            GameEvent($ev: this, eventType memberOf goodEvents, (lane == "adc" || lane == "support"))
            from window LastEightEventsWindow,
            count($ev)
        )

        Number($badLast8: intValue >= 0) from accumulate(
            GameEvent($ev: this, eventType memberOf badEvents, (lane == "adc" || lane == "support"))
            from window LastEightEventsWindow,
            count($ev)
        )

        Number($goodWholeGame: intValue >= 0) from accumulate(
            GameEvent($allEv: this, eventType memberOf goodEvents, (lane == "adc" || lane == "support"))
            from window AllEventsWindow,
            count($allEv)
        )

        Number($badWholeGame: intValue >= 0) from accumulate(
            GameEvent($allEv: this, eventType memberOf badEvents, (lane == "adc" || lane == "support"))
            from window AllEventsWindow,
            count($allEv)
        )

        not(JunglerConclusion(nextGank != ""))
        $jc: JunglerConclusion()
    then
        System.out.println("BOTTOM");
        System.out.println($goodLast8);
        System.out.println($badLast8);
        System.out.println($goodWholeGame);
        System.out.println($badWholeGame);
        System.out.println(-1 * (($goodWholeGame - $goodLast8) - ($badWholeGame - $badLast8))
                                   -3 * ($goodLast8 - $badLast8) + 100);
        System.out.println();
        modify($jc){setNextGank("bottom")}
end