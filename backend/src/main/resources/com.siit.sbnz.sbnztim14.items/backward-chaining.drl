package com.siit.sbnz.sbnztim14.items

import com.siit.sbnz.sbnztim14.model.FactTreeItem;
import com.siit.sbnz.sbnztim14.model.Item;
import java.util.List;


global String toLookFor;
global List remainingItems;


query backwardsChainCall( String parent, String self, FactTreeItem $retItem)
  $retItem := FactTreeItem(parent, self;)
  or
  (FactTreeItem(parent, newParent;) and backwardsChainCall( newParent, self, $retItem; ) )
end


rule "If bought item is contained in tree of wanted item, remove it and it's children from the tree"
    agenda-group "backward-chaining"
    salience $gold
    when
        $item: Item(hasBeenInBackwards == false, $name: name, $gold: gold)
        backwardsChainCall(toLookFor, $name, $treeObject;)
        $list: List() from collect(FactTreeItem(parent == $treeObject.self))
    then
//        System.out.println($treeObject);
        for (Object childItem: $list) {
//            System.out.println(childItem);
            delete(childItem);
        }
        delete($treeObject);
        modify($item){setHasBeenInBackwards(true);}
end


rule "Final rule to return remaining items"
    agenda-group "backward-chaining"
    salience -99999
    when
        $factTreeItem: FactTreeItem()
    then
        remainingItems.add($factTreeItem);
end
